version: '2.3'
networks:
  # we need to create the network first docker network create proxy
  proxy:
    external: true
  internal:
    external: true
services:

  # redis:
  #   image: 'redis:4.0.8-alpine'
  #   networks:
  #     - 'internal'
  #   restart: 'always'
  #   command: 'redis-server --requirepass ${REDIS_PASSWORD}'
  #   volumes:
  #     - '${ROOT_FOLDER}/redis/data:/data'
  #   # ports: 
  #   #   - '6379:6379'

  # postgres:
  #   image: 'postgres:9.6.8-alpine'
  #   networks:
  #     - 'internal'
  #   restart: 'always'
  #   environment: 
  #     POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
  #   volumes:
  #     - '${ROOT_FOLDER}/postgres/data:/var/lib/postgresql/data'

  postgrest:
    image: 'valentinvieriu/booksclub:postgrest-0.4.4.0'
    restart: 'always'
    # depends_on:
    #   - 'postgres'
    networks:
      # - 'proxy'
      - 'internal'
    environment: 
      PGRST_DB_URI: 'postgres://${PGRST_DB_ANON_ROLE}:${POSTGRES_PASSWORD}@postgres:5432/booksclub'
      PGRST_DB_SCHEMA: 'public'
      PGRST_DB_ANON_ROLE: '${PGRST_DB_ANON_ROLE}'
      PGRST_SERVER_PROXY_URL: 'https://postgrest.${TLD}'
      PGRST_JWT_SECRET: '${PGRST_JWT_SECRET}'
      PGRST_MAX_ROWS: '5000'
    labels:
      # - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.port=3000'
      - 'traefik.frontend.rule=Host:postgrest.${TLD}'
      # - 'traefik.frontend.auth.basic=${GENERAL_PASSWORD}'

  api-proxy:
    image: 'valentinvieriu/booksclub:api-proxy-1.0.3'
    restart: 'always'
    depends_on:
      # - 'redis'
      - 'postgrest'
    networks:
      - 'internal'
      # - 'proxy'
    environment:
      PORT: '3000'
      NODE_ENV: 'production'
      POSTGREST: 'http://postgrest:3000'
      REDIS_URL: '${REDIS_URL}'
      USE_CLUSTER: 'true'
      IS_WORKER: 'false'
    labels:
      # - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.port=3000'
      # - 'traefik.frontend.rule=Host:api-proxy.${TLD}'

  api-cache:
    image: 'valentinvieriu/booksclub:api-cache-1.0.1'
    restart: 'always'
    depends_on:
      - 'api-proxy'
    networks:
      - 'internal'
      # - 'proxy'
    environment: 
      CACHE_SOURCE_1: 'http://api-proxy:3000'
    command: /bin/sh -c "envsubst '$$CACHE_SOURCE_1' < /app/apicache.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    volumes: 
      - '${ROOT_FOLDER}/api-cache/data:/app/cache'
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.port=80'
      - 'traefik.frontend.rule=Host:api.${TLD}'

  bookrepublic:
    image: 'valentinvieriu/booksclub:booksclub-1.1.4'
    restart: 'always'
    scale: 1
    depends_on:
      - 'api-proxy'
      - 'api-cache'
    networks:
      - 'internal'
      - 'proxy'
    environment: 
      NODE_ENV: 'production'
      API_URL: 'http://api-cache'
      PORT: '3000'
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.port=3000'
      - 'traefik.frontend.rule=Host:
        ${TLD},
        www.${TLD},
        booksclub.space,
        aubooks.club,
        hkbooks.club,
        iebooks.club,
        malaybooks.club,
        nzbooks.club,
        sgbooks.club,
        sydneybooks.club,
        ukbooks.club,
        zabooks.club,
        carteapenet.ro,
        www.carteapenet.ro'

  # carteapenet:
  #   image: 'valentinvieriu/booksclub:booksclub-1.0.8'
  #   restart: 'always'
  #   scale: 1
  #   depends_on:
  #     - 'api-proxy'
  #     - 'api-cache'
  #   networks:
  #     - 'internal'
  #     - 'proxy'
  #   environment: 
  #     NODE_ENV: 'production'
  #     APPNAME: 'carteapenet'
  #     API_URL: 'http://api-cache'
  #     PORT: '3000'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.docker.network=proxy'
  #     - 'traefik.port=3000'
  #     - 'traefik.frontend.rule=Host:carteapenet.ro,www.carteapenet.ro'

  # kue:
  #   image: 'valentinvieriu/booksclub:kue-1.0.2'
  #   restart: 'always'
  #   mem_limit: '128M'
  #   depends_on:
  #     - 'redis'
  #   networks:
  #     - 'internal'
  #     # - 'proxy'
  #   environment:
  #     NODE_ENV: 'production'
  #     REDIS_URL: '${REDIS_URL}'
  #     PORT: '9000'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.docker.network=proxy'
  #     - 'traefik.port=9000'
  #     - 'traefik.frontend.rule=Host:kue.${TLD}'
  #     - 'traefik.frontend.auth.basic=${GENERAL_PASSWORD}'

  chat-bot:
    image: 'valentinvieriu/booksclub:chatbot-1.0.3'
    networks:
      # - 'proxy'
      - 'internal'
    # depends_on:
    #   - mqtt
    restart: 'always'
    mem_limit: '128M'
    environment:
      - 'MQTT_SERVER=mqtt'
    labels:
      - 'traefik.enable=false'
      
  # mqtt:
  #   image: 'valentinvieriu/alpine-mosquitto:1.4.14'
  #   networks:
  #     - 'proxy'
  #     - 'internal'
  #   restart: 'always'
  #   mem_limit: '128M'
  #   ports:
  #     - '1883:1883'
  #     # - '9001:9001'
  #   volumes: 
  #     - '${ROOT_FOLDER}/mqtt:/data'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.docker.network=proxy'
  #     - 'traefik.port=9001'
  #     - 'traefik.default.protocol=ws'
  #     - 'traefik.frontend.rule=PathPrefixStrip:/mqt'
  #     - 'traefik.frontend.rule=Host:mqtt.${TLD}'

  # portainer:
  #   image: 'portainer/portainer:1.17.1'
  #   networks:
  #     - 'proxy'
  #   restart: 'always'
  #   mem_limit: '64M'
  #   command: '--no-auth'
  #   volumes: 
  #     - '/var/run/docker.sock:/var/run/docker.sock'
  #     - '${ROOT_FOLDER}/portainer/data:/data'
  #   environment:
  #     NODE_ENV: 'production'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.docker.network=proxy'
  #     - 'traefik.port=9000'
  #     - 'traefik.frontend.rule=Host:portainer.${TLD}'
  #     - 'traefik.frontend.auth.basic=${GENERAL_PASSWORD}'

  # traefik:
  #   image: 'traefik:1.6.2'
  #   networks:
  #     - 'proxy'
  #     - 'internal'
  #   restart: 'always'
  #   command: 
  #     # - '--api'
  #     - '--web'
  #     - '--logLevel=DEBUG'
  #     - '--entrypoints=Name:http Address::80 Redirect.EntryPoint:https'
  #     - '--entrypoints=Name:https Address::443 TLS'
  #     - '--defaultentrypoints=http,https'
  #     - '--acme'
  #     - '--acme.acmelogging=true'
  #     - '--acme.storage=/etc/traefik/acme.json'
  #     - '--acme.entryPoint=https'
  #     - '--acme.httpChallenge.entryPoint=http'
  #     - '--acme.OnHostRule=true'
  #     - '--acme.onDemand=false'
  #     - '--acme.email=valentin.vieriu@gmail.com'
  #     # - '--acme.caServer=https://acme-staging.api.letsencrypt.org/directory'
  #     - '--docker'
  #     # - '--docker.swarmmode'
  #     - '--docker.domain=${TLD}'
  #     - '--docker.watch'  
  #     - '--docker.exposedByDefault=false'
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #     # - '8080:8080'
  #   volumes:
  #     - '/var/run/docker.sock:/var/run/docker.sock'
  #     - '${ROOT_FOLDER}/traefik:/etc/traefik'
  #     # - '${ROOT_FOLDER}/data/traefik.toml:/etc/traefik/traefik.toml'
  #     # - '${ROOT_FOLDER}/data/acme.json:/etc/traefik/acme.json'
  #   # environment: 
  #     # DEBUG: 'true'
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.docker.network=proxy'
  #     - 'traefik.port=8080'
  #     # - 'traefik.default.protocol=https'
  #     - 'traefik.frontend.rule=Host:traefik.${TLD}'
  #     - 'traefik.frontend.auth.basic=${GENERAL_PASSWORD}'
